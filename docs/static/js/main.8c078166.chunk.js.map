{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GIfExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GIfExpertApp","index","ReactDOM","render","document","getElementById"],"mappings":"mMAIe,SAASA,EAAT,GAAuC,IAAjBC,EAAgB,EAAhBA,cAAgB,EACbC,mBAAS,IADI,mBAC1CC,EAD0C,KAC9BC,EAD8B,KAejD,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAO,IACzBR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAmBO,OAC1CN,EAAc,MAIlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAjBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,Y,YCNhB,SAASG,EAAT,GAAmC,IAAbC,EAAY,EAAZA,MAAMC,EAAM,EAANA,IACvC,OAEI,qBAAKC,UAAU,yCAAf,SACI,qBAAKC,IAAKF,EAAKG,IAAKJ,M,2BCDnBK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbN,EAFa,0FAE4EO,UAAUF,GAFtF,sBAGAG,MAAMR,GAHN,cAGbS,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAGD,EAAIC,GACPhB,MAAMe,EAAIf,MACVC,IAAG,UAACc,EAAIE,cAAL,aAAC,EAAYC,iBAAiBjB,QAVtB,kBAeZY,GAfY,4CAAH,sDCAL,SAASM,EAAT,GAA8B,IAAZb,EAAW,EAAXA,SAAW,ECDhB,SAACA,GAAc,IAAD,EAEZpB,mBAAS,CAC/B0B,KAAK,GACLQ,SAAQ,IAJ0B,mBAE/BC,EAF+B,KAExBC,EAFwB,KAwBtC,OAjBAC,qBAAU,WACNlB,EAAQC,GACHkB,MAAK,SAAAC,GAAI,OACNH,EAAS,CACLV,KAAKa,EACLL,SAAQ,SAGtB,CAACd,IASIe,EDpBuBK,CAAapB,GAA/BW,EAH4B,EAGjCL,KAAYQ,EAHqB,EAGrBA,QA4BnB,OAEI,qCACI,oBAAIlB,UAAU,oCAAd,SAAmDI,IAElDc,GAAW,mBAAGlB,UAAU,mCAAb,yBAEZ,qBAAKA,UAAU,YAAf,SACSe,EAAOH,KAAI,SAAAC,GAAG,OACX,cAAChB,EAAD,eAEQgB,GADCA,EAAIC,YExCtB,SAASW,IAAe,MAGAzC,mBAAS,CAAC,cAHV,mBAG5BQ,EAH4B,KAGjBT,EAHiB,KAWnC,OACI,qCACI,8CACI,cAACD,EAAD,CAAaC,cAAeA,IAChC,uBAEA,6CACA,6BAEQS,EAAWoB,KAAI,SAACR,EAASsB,GAAV,OACX,cAACT,EAAD,CAEIb,SAAUA,GADLA,W,MCrBjCuB,IAASC,OACL,cAACH,EAAD,IACFI,SAASC,eAAe,W","file":"static/js/main.8c078166.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport default function AddCategory({setCategories}) {\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const hangleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        if(inputValue.trim().length>2){\r\n           setCategories(categories => [inputValue,...categories])\r\n            setInputValue('');\r\n        }\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={hangleInputChange}\r\n            />\r\n        </form>\r\n\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories:PropTypes.func.isRequired,\r\n}","import React from 'react'\r\n\r\nexport default function GifGridItem({title,url}) {\r\n    return (\r\n        \r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}/>\r\n        </div>\r\n    )\r\n}\r\n","\r\n//HELPERS ACCIONES QUE VAN A HACER ALGO EN ESPECIFICO\r\n//PUEDEN RECIBIR VALORES Y RETORNAR ALGO\r\n\r\n//ESTA FUNCION REGRESA UNA PROMESA QUE RETORNARA LOS GIFS\r\nexport const getGifs = async (category) => {\r\n    \r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=VuwP1YTIwkqEd3L2a7d7XcjAnqSpPOHw&q=${encodeURI(category)}&limit=10`\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id:img.id,\r\n            title:img.title,\r\n            url:img.images?.downsized_medium.url\r\n\r\n        }\r\n    })\r\n    \r\n    return gifs\r\n    //console.log(gifs);\r\n    //setImages(gifs);\r\n}","import React,{useState} from 'react'\r\n///import { getGifs } from '../helpers/getGifs';\r\nimport GifGridItem from './GifGridItem';\r\nimport { useFetchGifs }  from '../hooks/useFetchGifs';\r\n\r\nexport default function GifGrid({category}) {\r\n    \r\n    //const [images, setImages] = useState([]);\r\n    const {data:images,loading} = useFetchGifs(category);\r\n\r\n    //console.log(data,loading)\r\n    // useEffect(() => {\r\n    //     getGifs(category)\r\n    //         .then(imgs => setImages(imgs) )\r\n    // },[category])\r\n\r\n    // const getGifs = async () => {\r\n    //     const url = `https://api.giphy.com/v1/gifs/search?api_key=VuwP1YTIwkqEd3L2a7d7XcjAnqSpPOHw&q=${encodeURI(category)}&limit=10`\r\n    //     const resp = await fetch(url);\r\n    //     const {data} = await resp.json();\r\n\r\n    //     const gifs = data.map(img => {\r\n    //         return {\r\n    //             id:img.id,\r\n    //             title:img.title,\r\n    //             url:img.images?.downsized_medium.url\r\n\r\n    //         }\r\n    //     })\r\n        \r\n    //     console.log(gifs);\r\n    //     setImages(gifs);\r\n    // }\r\n\r\n    //getGifs();\r\n\r\n    return (\r\n\r\n        <>  \r\n            <h3 className='animate__animated animate__fadeIn'>{category}</h3>\r\n\r\n            {loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}\r\n            \r\n            <div className=\"card-grid\">\r\n                    {images.map(img =>\r\n                        <GifGridItem \r\n                            key={img.id}\r\n                            {...img} />       \r\n                    )}\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport {getGifs} from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\n    useEffect(()=>{\r\n        getGifs(category)\r\n            .then(imgs => \r\n                setState({\r\n                    data:imgs,\r\n                    loading:false\r\n                })    \r\n            )\r\n    },[category])\r\n    \r\n    /*setTimeout(() => {\r\n        setState({\r\n            data:[1,2,3,4,5,6],\r\n            loading:false\r\n        })\r\n    }, 3000);*/\r\n\r\n    return state;\r\n\r\n}","import React,{useState} from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport AddCategory from './components/AddCategory'\r\nimport GifGrid from './components/GifGrid'\r\n\r\n\r\nexport default function GIfExpertApp() {\r\n\r\n    //const categories = ['One Punch','Samurai X','Dragon Ball'];\r\n    const [categories,setCategories] = useState(['One Punch'])\r\n\r\n    // const handleAdd = () => {\r\n    //     let category = 'Rudolf';\r\n\r\n    //     setCategories(c => [...c,category]);\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GIfExpertApp</h2>\r\n                <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n\r\n            <button >Agregar</button>\r\n            <ol>\r\n                {\r\n                    categories.map((category,index) => (\r\n                        <GifGrid \r\n                            key={category}\r\n                            category={category}/>\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GIfExpertApp from './GIfExpertApp';\nimport './index.css'\n//import reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n    <GIfExpertApp/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}